<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:cv="clr-namespace:WpfCustomControlLibrary.Converter"
                    x:Class="WpfCustomControlLibrary.View.CommonStyle">
    <cv:FontSizeConverter x:Key="FontSizeConverter"/>
    <cv:MathConverter x:Key="MathConverter"/>
    <cv:EnumToBooleanConverter x:Key="EnumToBooleanConverter"/>
    <Style TargetType="TextBox" x:Key="textReadonly">
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="Background" Value="LightGray"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="IsTabStop" Value="False"/>
    </Style>
    <Style TargetType="TextBox" x:Key="textInput">
        <Setter
            Property="FontSize"
            Value="{Binding Path=ActualHeight,
                RelativeSource={RelativeSource Mode=FindAncestor,
                    AncestorType=Grid},
                Converter={StaticResource FontSizeConverter}}"/>
    </Style>
    
    <ControlTemplate x:Key="validationTemplate">
        <StackPanel>
            <Border BorderBrush="Red" BorderThickness="2">
                <AdornedElementPlaceholder
                    x:Name="placeholder"
                    AutomationProperties.AutomationId="placeholder" />
            </Border>
            <TextBlock
                FontSize="{Binding Path=ActualHeight,
                    ElementName=placeholder,
                    Converter={StaticResource FontSizeConverter}}"
                FontStyle="Italic" Foreground="Red"
                Background="White"
                Text="{Binding ElementName=placeholder,
                    Path=AdornedElement.(Validation.Errors)/ErrorContent}"
                AutomationProperties.AutomationId="textBlockError"
                />
        </StackPanel>
    </ControlTemplate>
    <Style x:Key="textBoxInError" TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
        Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)/ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F3F3F3" Offset="0"/>
        <GradientStop Color="#EBEBEB" Offset="0.5"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#CDCDCD" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
    <Style x:Key="ToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <StackPanel Orientation="Horizontal">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Border x:Name="on" Width="25" Height="25" Background="LightGray" CornerRadius="2,0,0,4" Margin="10,0,0,0">
                            <TextBlock x:Name="onText" Text="On" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White"/>
                        </Border>
                        <Border x:Name="off" Width="25" Height="25" Background="LightGray" CornerRadius="0,2,4,0">
                            <TextBlock x:Name="offText" Text="Off" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="Black"/>
                        </Border>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="on" Property="Background" Value="Blue"/>
                            <Setter TargetName="on" Property="Width" Value="35"/>
                            <Setter TargetName="off" Property="Width" Value="15"/>
                            <Setter TargetName="onText" Property="Text" Value="On"/>
                            <Setter TargetName="offText" Property="Text" Value=""/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="off" Property="Background" Value="#EEEEEE"/>
                            <Setter TargetName="on" Property="Width" Value="15"/>
                            <Setter TargetName="off" Property="Width" Value="35"/>
                            <Setter TargetName="onText" Property="Text" Value=""/>
                            <Setter TargetName="offText" Property="Text" Value="Off"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
